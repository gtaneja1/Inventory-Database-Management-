// 
//I have used Java Swing to create the frontend for my Inventory Database Management System.
//The final result includes four key tables that form the core of the system:
//Inventory Users: This table manages user accounts, including authentication and authorization information. It allows for different user types and tracks login activity.
//Invoice: Stores detailed information about sales transactions, including product names, quantities, and prices.
//Provides: A junction table that likely manages relationships between brands, stores, and discounts, although it lacks primary and foreign key constraints.
//Product: Contains comprehensive product information, including stock levels, categories, and relationships to stores.



import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.sql.*;
import java.io.*;
import java.sql.DriverManager;

public class InventoryManagementSystem extends JFrame {
    private JTabbedPane tabbedPane;
    private Connection connection;

    public InventoryManagementSystem() {
        initializeUI();
        connectToDatabase();
    }

    private void initializeUI() {
        setTitle("Inventory Management System");
        setSize(1000, 700);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        tabbedPane = new JTabbedPane();
        tabbedPane.addTab("Products", createTablePanel("product", 
            new String[]{"PID_NUMBER", "PNAME", "P_STOCK", "added_date"}));
        tabbedPane.addTab("Users", createTablePanel("inventory_users", 
            new String[]{"USER_ID", "NAME", "LAST_LOGIN", "USER_TYPE"}));
        tabbedPane.addTab("Invoices", createTablePanel("invoice", 
            new String[]{"ITEM_NO", "PRODUCT_NAME", "QUANTITY_NO", "NET_PRICE_NO", "TRANSACTION_ID"}));
        tabbedPane.addTab("Customers", createTablePanel("customers", 
            new String[]{"CUSTOMER_ID", "FIRST_NAME", "LAST_NAME"}));
        
        add(tabbedPane);

        JMenuBar menuBar = new JMenuBar();
        JMenu fileMenu = new JMenu("File");
        JMenuItem exitItem = new JMenuItem("Exit");
        exitItem.addActionListener(e -> System.exit(0));
        fileMenu.add(exitItem);
        menuBar.add(fileMenu);
        setJMenuBar(menuBar);
    }

    private void connectToDatabase() {
        try {
        	try {
				Class.forName("com.mysql.cj.jdbc.Driver");
			} catch (ClassNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        	connection = DriverManager.getConnection(
        		    "jdbc:mysql://localhost:3306/mydb",  // Change if your database name is different
        		    "username",
                "Password" // Replace with your MySQL password
            );
            executeSQLFiles(connection);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, 
                "Failed to connect to database: " + e.getMessage(), 
                "Database Error", 
                JOptionPane.ERROR_MESSAGE);
        }
    }

    private void executeSQLFiles(Connection conn) {
        String folderPath = "INVENTORY DATABASE MANAGEMENT/";
        try {
            String[] sqlFiles = {
                "mydb_brands.sql",
                "mydb_categories.sql",
                "mydb_customer_cart.sql",
                "mydb_customers.sql",
                "mydb_inventory_users.sql",
                "mydb_invoice.sql",
                "mydb_product.sql",
                "mydb_provides.sql",
                "mydb_select_product.sql",
                "mydb_stores.sql",
                "mydb_transaction.sql",
                "mydb_workers.sql"
            };
            
            for (String file : sqlFiles) {
                BufferedReader reader = new BufferedReader(new FileReader(folderPath + file));
                StringBuilder sb = new StringBuilder();
                String line;
                while ((line = reader.readLine()) != null) {
                    if (!line.trim().startsWith("--")) {
                        sb.append(line);
                    }
                }
                reader.close();
                
                String[] statements = sb.toString().split(";");
                Statement stmt = conn.createStatement();
                for (String statement : statements) {
                    if (!statement.trim().isEmpty()) {
                        stmt.execute(statement);
                    }
                }
                stmt.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private JPanel createTablePanel(String tableName, String[] columns) {
        JPanel panel = new JPanel(new BorderLayout());
        DefaultTableModel model = new DefaultTableModel(columns, 0);
        JTable table = new JTable(model);
        JScrollPane scrollPane = new JScrollPane(table);
        panel.add(scrollPane, BorderLayout.CENTER);

        JPanel buttonPanel = new JPanel();
        JButton refreshButton = new JButton("Refresh");
        JButton addButton = new JButton("Add");
        JButton editButton = new JButton("Edit");
        JButton deleteButton = new JButton("Delete");

        refreshButton.addActionListener(e -> refreshTable(tableName, model));
        addButton.addActionListener(e -> addRecord(tableName));
        editButton.addActionListener(e -> editRecord(tableName, table));
        deleteButton.addActionListener(e -> deleteRecord(tableName, table));

        buttonPanel.add(refreshButton);
        buttonPanel.add(addButton);
        buttonPanel.add(editButton);
        buttonPanel.add(deleteButton);
        panel.add(buttonPanel, BorderLayout.SOUTH);

        return panel;
    }

    private void refreshTable(String tableName, DefaultTableModel model) {
        model.setRowCount(0);
        try {
            Statement stmt = connection.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM " + tableName);
            ResultSetMetaData metaData = rs.getMetaData();
            int columnCount = metaData.getColumnCount();
            
            while (rs.next()) {
                Object[] row = new Object[columnCount];
                for (int i = 1; i <= columnCount; i++) {
                    row[i-1] = rs.getObject(i);
                }
                model.addRow(row);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, 
                "Failed to refresh table: " + e.getMessage(), 
                "Database Error", 
                JOptionPane.ERROR_MESSAGE);
        }
    }

    private void addRecord(String tableName) {
        JOptionPane.showMessageDialog(this, 
            "Add record functionality not implemented yet", 
            "Information", 
            JOptionPane.INFORMATION_MESSAGE);
    }

    private void editRecord(String tableName, JTable table) {
        int selectedRow = table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, 
                "Please select a record to edit", 
                "Information", 
                JOptionPane.INFORMATION_MESSAGE);
            return;
        }
    }

    private void deleteRecord(String tableName, JTable table) {
        int selectedRow = table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, 
                "Please select a record to delete", 
                "Information", 
                JOptionPane.INFORMATION_MESSAGE);
            return;
        }
    }

    public static void main(String[] args) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        SwingUtilities.invokeLater(() -> {
            new InventoryManagementSystem().setVisible(true);
        });
    }
}
